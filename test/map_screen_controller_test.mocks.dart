// Mocks generated by Mockito 5.4.6 from annotations
// in camping_osm_navi/test/map_screen_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:camping_osm_navi/models/graph_node.dart' as _i2;
import 'package:camping_osm_navi/models/location_info.dart' as _i4;
import 'package:camping_osm_navi/models/routing_graph.dart' as _i8;
import 'package:camping_osm_navi/models/searchable_feature.dart' as _i5;
import 'package:camping_osm_navi/providers/location_provider.dart' as _i3;
import 'package:latlong2/latlong.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGraphNode_0 extends _i1.SmartFake implements _i2.GraphNode {
  _FakeGraphNode_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocationProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationProvider extends _i1.Mock implements _i3.LocationProvider {
  MockLocationProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i4.LocationInfo> get availableLocations => (super.noSuchMethod(
        Invocation.getter(#availableLocations),
        returnValue: <_i4.LocationInfo>[],
      ) as List<_i4.LocationInfo>);

  @override
  bool get isLoadingLocationData => (super.noSuchMethod(
        Invocation.getter(#isLoadingLocationData),
        returnValue: false,
      ) as bool);

  @override
  List<_i5.SearchableFeature> get currentSearchableFeatures =>
      (super.noSuchMethod(
        Invocation.getter(#currentSearchableFeatures),
        returnValue: <_i5.SearchableFeature>[],
      ) as List<_i5.SearchableFeature>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> selectLocation(_i4.LocationInfo? location) =>
      (super.noSuchMethod(
        Invocation.method(
          #selectLocation,
          [location],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [RoutingGraph].
///
/// See the documentation for Mockito's code generation for more information.
class MockRoutingGraph extends _i1.Mock implements _i8.RoutingGraph {
  MockRoutingGraph() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, _i2.GraphNode> get nodes => (super.noSuchMethod(
        Invocation.getter(#nodes),
        returnValue: <String, _i2.GraphNode>{},
      ) as Map<String, _i2.GraphNode>);

  @override
  _i2.GraphNode addNode(_i9.LatLng? position) => (super.noSuchMethod(
        Invocation.method(
          #addNode,
          [position],
        ),
        returnValue: _FakeGraphNode_0(
          this,
          Invocation.method(
            #addNode,
            [position],
          ),
        ),
      ) as _i2.GraphNode);

  @override
  void addEdge(
    _i2.GraphNode? fromNode,
    _i2.GraphNode? toNode,
    double? weight, {
    bool? oneway = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #addEdge,
          [
            fromNode,
            toNode,
            weight,
          ],
          {#oneway: oneway},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.GraphNode? findNearestNode(_i9.LatLng? point) =>
      (super.noSuchMethod(Invocation.method(
        #findNearestNode,
        [point],
      )) as _i2.GraphNode?);

  @override
  void resetAllNodeCosts() => super.noSuchMethod(
        Invocation.method(
          #resetAllNodeCosts,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
